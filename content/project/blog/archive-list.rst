---
title: "How to List Old Posts"
date: 2019-09-04T06:46:11-04:00
draft: true
categories: blog
tags: [archive, history]
slug: list old blog posts
---

When my blog was generated by Jekyll, the sidebar included a drop-down list of years. Within each year, there was a drop-down list of posts from that year. To make those lists for Hugo, I'm going to have to reverse engineer the Liquid Template and recreate it as a Hugo template.
<!--more-->

Here's the chunk of Liquid Template code that worked for me in my Jekyll generated blog::

  <section class="posts-previous" id="posts-previous">
    <nav>
      {% assign defaultCategory = "blog" %}
      {% assign postsArray = site.array %}
      {% for category in page.categories %}
        {% assign newPosts = site.categories[category] %}
        <!-- you would think a simple "concat:" would just work -->
        {% for post in newPosts %}
          {% assign postsArray = postsArray | push: post %}
        {% endfor %}
      {% endfor %}

      {% if postsArray.size > 0 %}
        {% assign postsArray = postsArray | uniq: | sort: 'date' | reverse: %}
      {% else %}
        {% assign postsArray = site.categories[defaultCategory] %}
      {% endif %}

      {% for post in postsArray %}
        {% if forloop.first %}
      <h3 id="header-this-year">{{ 'now' | date: "%Y" }}</h3>
      <ul class="this-years-posts">
        {% else %}
          {% capture year %}{{ post.date | date: '%Y' }}{% endcapture %}
          {% if post.next %}
            {% capture nyear %}{{ post.next.date | date: '%Y' }}{% endcapture %}
          {% elsif nyear == null %}
            {% assign nyear = year %}
          {% endif %}
          {% if year != nyear %}
      </ul>
      <h3 class="header-previous-years">{{ post.date | date: '%Y' }}</h3>
      <ul class="past-posts">
          {% endif %} <!-- if year != nyear -->
        {% endif %} <!-- if forloop.first -->
        <li class="side-list-item"><a href="{{ post.url }}">{{ post.title }}</a></li>
      {% endfor %} <!-- for post in postsArray -->
      </ul>
    </nav>
  </section>

The CSS for this chunk of code is:

.. code-block:: css

  #posts-previous {
    margin: auto;
  }

  h3#header-this-year, h3.header-previous-years {
    text-align: center;
  }

  ul.this-years-posts, ul.past-posts {
    margin: 0 auto;
    list-style-position: outside;
    list-style-type: square;
  }

I assigned the category "blog" to blog posts, and other categories to posts in directories outside of the ``_posts`` directory. I'm not sure why the first loop iterates over ``page.categories``. Perhaps the idea was to have different lists depending on the values in the ``category:`` or ``categories:`` front matter on the current page. Oddly complicated - I really had only two; "blog" for everything under ``./_posts``, and "kempo" for everything under ``./kempo``.

Whatever the reason, the result was to stuff all the posts into ``postsArray``. I think the equivalent Hugo template code to collect all posts is to range over ``.Pages``::

      {{ range $idx, $page := .context.Pages }}
      {{ end }}

It's not quite right. The list changes based on where the current page is located. Using ``.Site.Pages``, we get all the pages, and all the folders containing a ``_index.md`` file, too.
::

      {{ range $idx, $page := .context.Site.Pages }}
      {{ end }}

The `Site Variables <https://gohugo.io/variables/site/>`_ has these two definitions:

.Site.Pages
  array of all content ordered by Date with the newest first. This array contains only the pages in the current language. See `The .Site.Pages Variable <https://gohugo.io/variables/site/#site-pages>`_ (it's a section that contains details on the ``.Site.Pages`` and ``.Site.RegularPages`` variables.

.Site.RegularPages
  a shortcut to the regular page collection. ``.Site.RegularPages`` is equivalent to ``where .Site.Pages "Kind" "page"``. See `The .Site.Pages Variable <https://gohugo.io/variables/site/#site-pages>`_.

Looking at the section `The .Site.Pages Variable <https://gohugo.io/variables/site/#site-pages>`_ which provides more detail about the ``.Site.Pages`` variable, we see two more definitions:

regular page
  a “post” page or a “content” page.
  A leaf bundle is a regular page.

list page
  can list regular pages and other list pages. Some examples are: homepage, section pages, taxonomy term (/tags/) and taxonomy (/tags/foo/) pages.
  A branch bundle is a list page.

So, here is more of what we need to understand:

.Site.Pages
  a collection of all pages of the site: regular pages, sections, taxonomies, etc. – Superset of everything!

.Site.RegularPages
  a collection of only regular pages.

The above ``.Site. ..`` page collections can be accessed from any scope in the templates.
Below variables return a collection of pages only from the scope of the current list page:

.Pages
  Collection of regular pages and only first-level section pages under the current list page.

.RegularPages
  Collection of only regular pages under the current list page.

Another piece to the puzzle is using `site.Params.mainsections <https://gohugo.io/functions/where/#mainsections>`_. The documentation says:

  To list the most relevant pages on the front page or similar, you should use the site.Params.mainSections list instead of comparing section names to hard-coded values like ``"posts"`` or ``"post"``.

The given example is::

  {{ $pages := where site.RegularPages "Type" "in" site.Params.mainSections }}

If ``mainSections`` is not set in the site configuration, it defaults to the section with the most pages. I set it to ``mainSections = ["post", "journal", "note", "project"]`` in ``config/params.toml``. If you just have ``config.toml``, it can be set the same way::

  [params]
    mainSections = ["post", "journal", "note", "project"]

So the real loop resembles::

      {{ range $idx, $page :=  where .context.Site.RegularPages.ByDate.Reverse "Type" "in" site.Params.mainSections }}
      {{ end }}

The next part sorts all the posts in ``postsArray`` ensuring they are unique and reverse-sorted by date (newest ones in front). Once the posts are sorted, loop through ``postsArray`` creating one header for the current year and a list of posts under it, and another header for each previous year, with a list of posts under those headers.

######################
Defaults and Structure
######################

The two lowest level default base templates are located at ``/themes/<THEME>/layouts/_default/baseof.html`` and ``/layouts/_default/baseof.html``. The entire heirarchy of directory paths that Hugo searches for a base template is this, from highest to lowest priority:

#. ``/layouts/section/<TYPE>-baseof.html``
#. ``/themes/<THEME>/layouts/section/<TYPE>-baseof.html``
#. ``/layouts/<TYPE>/baseof.html``
#. ``/themes/<THEME>/layouts/<TYPE>/baseof.html``
#. ``/layouts/section/baseof.html``
#. ``/themes/<THEME>/layouts/section/baseof.html``
#. ``/layouts/_default/<TYPE>-baseof.html``
#. ``/themes/<THEME>/layouts/_default/<TYPE>-baseof.html``
#. ``/layouts/_default/baseof.html``
#. ``/themes/<THEME>/layouts/_default/baseof.html``

Hugo's default behavior is to have ``<TYPE>`` inherit from ``section`` unless otherwise specified.

If, for example, you are using a theme called "mytheme" and Hugo picks ``layouts/section/posts.html`` to render this ``posts`` section, any ``{{define}}`` block in it tells Hugo that this template is an extension of a base template.

The template lookup order for the ``posts`` template is:

#. ``/layouts/section/posts-baseof.html``
#. ``/themes/mytheme/layouts/section/posts-baseof.html``
#. ``/layouts/posts/baseof.html``
#. ``/themes/mytheme/layouts/posts/baseof.html``
#. ``/layouts/section/baseof.html``
#. ``/themes/mytheme/layouts/section/baseof.html``
#. ``/layouts/_default/posts-baseof.html``
#. ``/themes/mytheme/layouts/_default/posts-baseof.html``
#. ``/layouts/_default/baseof.html``
#. ``/themes/mytheme/layouts/_default/baseof.html``

`Section page templates`_  are lists, so have all the variables and methods available to `list pages`_. List templates are used to render your site homepage, section page, taxonomy list, or taxonomy terms list. Hugo uses the term list in its truest sense; i.e., a sequential arrangement of material, especially in alphabetical or numerical order. Hugo uses list templates on any output HTML page where content is traditionally listed. This kind of page includes pages for taxonomy terms (like all posts in a given category), taxonomies (like a page listing all categories or another listing all tags), pages of section lists, or RSS pages.

************
Page Concept
************

Everything in Hugo is a page. This means list pages and the homepage can have associated content files (i.e., _index.md) that contain page metadata (i.e., front matter) and content. This model allows you to include list-specific front matter via ``.Params`` and also means that list templates (e.g., ``layouts/_default/list.html``) have access to all `page variables`_.

.. note::

  It is important to note that all ``_index.md`` content files will render according to a list template and not according to a `single page template`_.

A content's ``section`` is defined by the name of the directory in the ``content`` directory that includes the content's file. For example, if a content file is ``/content/posts/foo/bar/interesting-post.md``, then it's section is ``posts``. The rest of the path does *not* affect the section to which the content belongs.

##########
References
##########

* Hugo's `Content Organization`_
* `Section Page Templates`_.
* `Template Lookup Order`_ determines the search-order for section templates.

.. _content organization: https://gohugo.io/content-management/organization/
.. _section page templates: https://gohugo.io/templates/section-templates/
.. _template lookup order: https://gohugo.io/templates/lookup-order/
.. _list pages: https://gohugo.io/templates/lists
.. _page variables: https://gohugo.io/variables/page/
.. _single page template: https://gohugo.io/templates/single-page-templates/
